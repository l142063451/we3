// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMIN
  APPROVER
  EDITOR
  DATA_ENTRY
  VIEWER
}

enum ProjectStatus {
  DRAFT
  APPROVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SubmissionStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED
}

enum PageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum DirectoryType {
  SHG
  BUSINESS
  ARTISAN
}

enum PledgeType {
  TREE
  SOLAR
  WASTE
}

enum NotificationChannel {
  EMAIL
  SMS
  WHATSAPP
  WEB_PUSH
}

enum DeliveryStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
}

// Core user management
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  phone       String?
  locale      String   @default("hi-IN")
  roles       UserRole[]
  twoFAEnabled Boolean @default(false)
  twoFASecret String?
  emailVerified DateTime?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  accounts     Account[]
  sessions     Session[]
  pages        Page[]          @relation("PageCreatedBy")
  updatedPages Page[]          @relation("PageUpdatedBy")
  media        Media[]
  submissions  Submission[]
  eligibilityRuns EligibilityRun[]
  pledges      Pledge[]
  carbonCalcRuns CarbonCalcRun[]
  auditLogs    AuditLog[]
  notifications Notification[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Content Management
model Page {
  id          String     @id @default(cuid())
  slug        String     @unique
  title       Json       // { "hi": "Hindi title", "en": "English title" }
  locale      String     @default("hi-IN")
  status      PageStatus @default(DRAFT)
  blocks      Json       // Array of block objects
  seo         Json?      // SEO metadata
  version     Int        @default(1)
  publishedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  createdBy   User       @relation("PageCreatedBy", fields: [createdById], references: [id])
  createdById String
  updatedBy   User?      @relation("PageUpdatedBy", fields: [updatedById], references: [id])
  updatedById String?

  @@map("pages")
}

model Media {
  id          String   @id @default(cuid())
  url         String
  alt         String?
  caption     String?
  mimeType    String
  size        Int
  width       Int?
  height      Int?
  meta        Json?    // Additional metadata
  createdAt   DateTime @default(now())
  
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  @@map("media")
}

// Forms and Submissions
model Form {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  schemaJSON  Json     // Zod schema definition
  slaDays     Int      @default(7)
  workflowJSON Json?   // Assignment rules, escalation
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  submissions Submission[]

  @@map("forms")
}

model Submission {
  id          String          @id @default(cuid())
  formId      String
  userId      String?
  dataJSON    Json            // Form submission data
  files       String[]        // Array of file URLs
  status      SubmissionStatus @default(PENDING)
  assignedTo  String?
  geo         Json?           // { lat, lng, address }
  slaDue      DateTime?
  history     Json[]          // Status change history
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  form        Form            @relation(fields: [formId], references: [id])
  user        User?           @relation(fields: [userId], references: [id])

  @@map("submissions")
}

// Projects and Budgets
model Project {
  id          String        @id @default(cuid())
  title       Json          // Multilingual title
  description Json?         // Multilingual description
  type        String        // e.g., "infrastructure", "social", "environment"
  ward        String?
  budget      Decimal       @db.Decimal(12, 2)
  spent       Decimal       @db.Decimal(12, 2) @default(0)
  status      ProjectStatus @default(DRAFT)
  startDate   DateTime?
  endDate     DateTime?
  geo         Json?         // GeoJSON point or polygon
  docs        String[]      // Array of document URLs
  tags        String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  milestones  Milestone[]
  contractors Contractor[]
  payments    Payment[]
  budgetLines BudgetLine[]

  @@map("projects")
}

model Milestone {
  id          String   @id @default(cuid())
  projectId   String
  title       Json     // Multilingual
  description Json?
  targetDate  DateTime
  actualDate  DateTime?
  progress    Int      @default(0) // 0-100
  notes       String?
  photos      String[] // Array of image URLs
  geo         Json?    // Location of milestone
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("milestones")
}

model Contractor {
  id          String   @id @default(cuid())
  name        String
  contact     Json     // { email, phone, address }
  docs        String[] // License, certificates etc.
  ratings     Json?    // Performance ratings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projects    Project[]
  payments    Payment[]

  @@map("contractors")
}

model Payment {
  id          String     @id @default(cuid())
  projectId   String
  contractorId String?
  amount      Decimal    @db.Decimal(12, 2)
  date        DateTime
  voucherNo   String?
  notes       String?
  createdAt   DateTime   @default(now())

  project     Project    @relation(fields: [projectId], references: [id])
  contractor  Contractor? @relation(fields: [contractorId], references: [id])

  @@map("payments")
}

model BudgetLine {
  id          String  @id @default(cuid())
  projectId   String
  head        String  // Budget head/category
  amount      Decimal @db.Decimal(12, 2)
  period      String? // Financial year or period

  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("budget_lines")
}

// Schemes and Eligibility
model Scheme {
  id              String   @id @default(cuid())
  title           Json     // Multilingual
  description     Json?
  category        String
  criteriaJSON    Json     // Eligibility rules
  docsRequired    String[] // Required documents
  processSteps    Json     // Application process
  links           Json[]   // Related links, forms
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  eligibilityRuns EligibilityRun[]

  @@map("schemes")
}

model EligibilityRun {
  id          String   @id @default(cuid())
  schemeId    String
  userId      String?
  answersJSON Json     // User's answers
  resultJSON  Json     // Eligibility result and recommendations
  createdAt   DateTime @default(now())

  scheme      Scheme   @relation(fields: [schemeId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  @@map("eligibility_runs")
}

// Events and Notices
model Event {
  id          String   @id @default(cuid())
  title       Json     // Multilingual
  description Json?
  startDate   DateTime
  endDate     DateTime?
  location    String?
  geo         Json?    // Location coordinates
  rsvpEnabled Boolean  @default(false)
  maxAttendees Int?
  attendeeCount Int    @default(0)
  attachments String[] // Files, images
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("events")
}

model Notice {
  id          String    @id @default(cuid())
  title       Json      // Multilingual
  category    String    // "tender", "order", "announcement"
  content     Json      // Multilingual content
  deadline    DateTime?
  attachments String[]  // PDF files, etc.
  priority    String    @default("normal") // "high", "normal", "low"
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("notices")
}

// Directory and Economy
model DirectoryEntry {
  id          String        @id @default(cuid())
  type        DirectoryType
  name        String
  contact     Json          // { email, phone, address, website }
  description Json?         // Multilingual
  products    Json[]        // Array of product/service objects
  geo         Json?         // Location
  logo        String?       // Image URL
  photos      String[]      // Gallery images
  tags        String[]
  approved    Boolean       @default(false)
  featured    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("directory_entries")
}

// Carbon Mission
model Pledge {
  id          String     @id @default(cuid())
  userId      String?
  pledgeType  PledgeType
  title       String?    // Optional custom title
  amount      Int        // Number of trees, kW capacity, etc.
  description String?
  geo         Json?      // Location if applicable
  approved    Boolean    @default(false)
  fulfilled   Boolean    @default(false)
  evidence    String[]   // Photos proving fulfillment
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User?      @relation(fields: [userId], references: [id])

  @@map("pledges")
}

model CarbonCalcRun {
  id          String   @id @default(cuid())
  userId      String?
  inputsJSON  Json     // Calculator inputs
  outputJSON  Json     // Results and recommendations
  createdAt   DateTime @default(now())

  user        User?    @relation(fields: [userId], references: [id])

  @@map("carbon_calc_runs")
}

model Donation {
  id            String   @id @default(cuid())
  donorName     String?
  donorEmail    String?
  donorPhone    String?
  type          String   // "materials", "funds", "trees", "labor"
  description   Json     // What's being donated
  value         Decimal? @db.Decimal(12, 2) // Estimated value
  publicConsent Boolean  @default(false)
  fulfilled     Boolean  @default(false)
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("donations")
}

// Internationalization
model TranslationKey {
  id          String   @id @default(cuid())
  key         String   @unique
  defaultText String
  module      String?  // Which part of app this belongs to
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  translations TranslationValue[]

  @@map("translation_keys")
}

model TranslationValue {
  id      String @id @default(cuid())
  keyId   String
  locale  String
  text    String
  
  key     TranslationKey @relation(fields: [keyId], references: [id], onDelete: Cascade)

  @@unique([keyId, locale])
  @@map("translation_values")
}

// Notifications
model Notification {
  id            String              @id @default(cuid())
  title         Json                // Multilingual
  content       Json                // Multilingual
  channels      NotificationChannel[]
  audienceJSON  Json                // Targeting criteria
  scheduledAt   DateTime?
  sentAt        DateTime?
  status        String              @default("draft") // "draft", "scheduled", "sending", "sent"
  createdAt     DateTime            @default(now())
  
  createdBy     User                @relation(fields: [createdById], references: [id])
  createdById   String
  
  deliveryStatuses DeliveryStatus_Model[]

  @@map("notifications")
}

model DeliveryStatus_Model {
  id             String            @id @default(cuid())
  notificationId String
  target         String            // email address, phone number, etc.
  channel        NotificationChannel
  status         DeliveryStatus
  error          String?
  sentAt         DateTime?
  deliveredAt    DateTime?
  
  notification   Notification      @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@map("delivery_statuses")
}

// Audit and Security
model AuditLog {
  id          String   @id @default(cuid())
  actorId     String?
  action      String   // "create", "update", "delete", "login", etc.
  entity      String   // Table/model name
  entityId    String?  // Record ID
  diffJSON    Json?    // Before/after changes
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  actor       User?    @relation(fields: [actorId], references: [id])

  @@map("audit_logs")
}

model FeatureFlag {
  id            String   @id @default(cuid())
  key           String   @unique
  enabled       Boolean  @default(false)
  audienceJSON  Json?    // Who can see this feature
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("feature_flags")
}

// GIS/Map data
model MapLayer {
  id          String   @id @default(cuid())
  name        String
  type        String   // "ward", "project", "issue", "resource", etc.
  geojson     Json     // GeoJSON data
  style       Json?    // Styling information
  visible     Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("map_layers")
}