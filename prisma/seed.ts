import { PrismaClient, UserRole } from '@prisma/client';
import * as bcrypt from 'bcryptjs';
import * as speakeasy from 'speakeasy';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Starting database seeding...');

  // Create admin user with TOTP 2FA
  const adminSecret = speakeasy.generateSecret({ name: 'Ummid Se Hari Admin' });
  
  const adminUser = await prisma.user.upsert({
    where: { email: 'admin@ummidsehari.in' },
    update: {},
    create: {
      email: 'admin@ummidsehari.in',
      name: '‡§™‡§Ç‡§ö‡§æ‡§Ø‡§§ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§ï',
      phone: '+91-9876543210',
      roles: [UserRole.ADMIN],
      locale: 'hi-IN',
      twoFAEnabled: true,
      twoFASecret: adminSecret.base32,
      emailVerified: new Date(),
    },
  });

  console.log('‚úÖ Admin user created:', adminUser.email);

  // Create sample roles users
  const editorUser = await prisma.user.upsert({
    where: { email: 'editor@ummidsehari.in' },
    update: {},
    create: {
      email: 'editor@ummidsehari.in',
      name: '‡§∏‡§Ç‡§™‡§æ‡§¶‡§ï',
      roles: [UserRole.EDITOR],
      locale: 'hi-IN',
      emailVerified: new Date(),
    },
  });

  const dataEntryUser = await prisma.user.upsert({
    where: { email: 'dataentry@ummidsehari.in' },
    update: {},
    create: {
      email: 'dataentry@ummidsehari.in',
      name: '‡§°‡•á‡§ü‡§æ ‡§è‡§Ç‡§ü‡•ç‡§∞‡•Ä ‡§ë‡§™‡§∞‡•á‡§ü‡§∞',
      roles: [UserRole.DATA_ENTRY],
      locale: 'hi-IN',
      emailVerified: new Date(),
    },
  });

  console.log('‚úÖ Staff users created');

  // Create sample pages with blocks
  const homePage = await prisma.page.upsert({
    where: { slug: 'home' },
    update: {},
    create: {
      slug: 'home',
      title: {
        hi: '‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶ ‡§∏‡•á ‡§π‡§∞‡•Ä - ‡§¶‡§æ‡§Æ‡§¶‡§Ø ‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§™‡§Ç‡§ö‡§æ‡§Ø‡§§',
        en: 'Ummid Se Hari - Damday Gram Panchayat'
      },
      locale: 'hi-IN',
      status: 'PUBLISHED',
      blocks: [
        {
          type: 'hero',
          id: 'hero-1',
          content: {
            title: {
              hi: '‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à ‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶ ‡§∏‡•á ‡§π‡§∞‡•Ä ‡§Æ‡•á‡§Ç',
              en: 'Welcome to Ummid Se Hari'
            },
            subtitle: {
              hi: '‡§ö‡•Å‡§Ü‡§®‡§æ‡§≤‡§æ ‡§¶‡§æ‡§Æ‡§¶‡§Ø ‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§™‡§Ç‡§ö‡§æ‡§Ø‡§§ - ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§î‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§¨‡§®-‡§Æ‡•Å‡§ï‡•ç‡§§ ‡§ó‡§æ‡§Å‡§µ',
              en: 'Chuanala Damday Gram Panchayat - Smart & Carbon-Free Village'
            },
            image: '/images/hero-damday.jpg',
            cta: {
              text: {
                hi: '‡§∏‡•á‡§µ‡§æ‡§è‡§Ç ‡§¶‡•á‡§ñ‡•á‡§Ç',
                en: 'View Services'
              },
              href: '/services'
            }
          }
        },
        {
          type: 'announcement',
          id: 'announcement-1',
          content: {
            title: {
              hi: 'üö® ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡•Ç‡§ö‡§®‡§æ',
              en: 'üö® Important Notice'
            },
            message: {
              hi: '‡§®‡§Ø‡§æ ‡§µ‡§æ‡§∞‡•ç‡§° ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§ö‡•Å‡§®‡§æ‡§µ 15 ‡§¶‡§ø‡§∏‡§Ç‡§¨‡§∞ 2024 ‡§ï‡•ã ‡§π‡•ã‡§ó‡§æ',
              en: 'New ward member election will be held on December 15, 2024'
            },
            type: 'info',
            dismissible: true
          }
        },
        {
          type: 'stats',
          id: 'stats-1',
          content: {
            items: [
              {
                label: { hi: '‡§ï‡•Å‡§≤ ‡§™‡§∞‡§ø‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç', en: 'Total Projects' },
                value: '24',
                trend: '+3'
              },
              {
                label: { hi: '‡§≤‡§ó‡§æ‡§è ‡§ó‡§è ‡§™‡•á‡§°‡§º', en: 'Trees Planted' },
                value: '1,250',
                trend: '+125'
              },
              {
                label: { hi: '‡§∏‡•ã‡§≤‡§∞ ‡§™‡•à‡§®‡§≤ (kW)', en: 'Solar Panels (kW)' },
                value: '85',
                trend: '+12'
              },
              {
                label: { hi: '‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§ï‡•Ä ‡§¶‡§∞', en: 'Resolution Rate' },
                value: '94%',
                trend: '+2%'
              }
            ]
          }
        }
      ],
      seo: {
        title: {
          hi: '‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶ ‡§∏‡•á ‡§π‡§∞‡•Ä - ‡§¶‡§æ‡§Æ‡§¶‡§Ø ‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§™‡§Ç‡§ö‡§æ‡§Ø‡§§',
          en: 'Ummid Se Hari - Damday Gram Panchayat'
        },
        description: {
          hi: '‡§ö‡•Å‡§Ü‡§®‡§æ‡§≤‡§æ ‡§¶‡§æ‡§Æ‡§¶‡§Ø ‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§™‡§Ç‡§ö‡§æ‡§Ø‡§§ ‡§ï‡§æ ‡§Ü‡§ß‡§ø‡§ï‡§æ‡§∞‡§ø‡§ï ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤‡•§ ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç, ‡§™‡§∞‡§ø‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç, ‡§î‡§∞ ‡§®‡§æ‡§ó‡§∞‡§ø‡§ï ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Ç‡•§',
          en: 'Official portal of Chuanala Damday Gram Panchayat. Services, projects, and citizen facilities.'
        }
      },
      publishedAt: new Date(),
      createdById: adminUser.id,
      updatedById: adminUser.id,
    },
  });

  console.log('‚úÖ Home page created');

  // Create sample projects
  const projects = await Promise.all([
    prisma.project.create({
      data: {
        title: {
          hi: '‡§∏‡•ã‡§≤‡§∞ ‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä‡§ü ‡§≤‡§æ‡§á‡§ü ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü',
          en: 'Solar Street Light Project'
        },
        description: {
          hi: '‡§ó‡§æ‡§Ç‡§µ ‡§ï‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡§°‡§º‡§ï‡•ã‡§Ç ‡§™‡§∞ ‡§∏‡•ã‡§≤‡§∞ ‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä‡§ü ‡§≤‡§æ‡§á‡§ü ‡§≤‡§ó‡§æ‡§®‡§æ',
          en: 'Installing solar street lights on main village roads'
        },
        type: 'infrastructure',
        ward: '‡§µ‡§æ‡§∞‡•ç‡§°-1',
        budget: 500000,
        spent: 375000,
        status: 'IN_PROGRESS',
        startDate: new Date('2024-01-15'),
        endDate: new Date('2024-12-31'),
        geo: {
          type: 'Point',
          coordinates: [77.2090, 28.6139]
        },
        tags: ['solar', 'infrastructure', 'lighting'],
        milestones: {
          create: [
            {
              title: {
                hi: '‡§∏‡§æ‡§á‡§ü ‡§∏‡§∞‡•ç‡§µ‡•á ‡§™‡•Ç‡§∞‡§æ',
                en: 'Site Survey Complete'
              },
              description: {
                hi: '‡§∏‡§≠‡•Ä ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§ï‡§æ ‡§∏‡§∞‡•ç‡§µ‡•á ‡§î‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡§ø‡§Ç‡§ó',
                en: 'Survey and marking of all locations'
              },
              targetDate: new Date('2024-02-28'),
              actualDate: new Date('2024-02-25'),
              progress: 100,
              photos: ['/images/survey-1.jpg', '/images/survey-2.jpg']
            },
            {
              title: {
                hi: '‡§≤‡§æ‡§á‡§ü ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤‡•á‡§∂‡§®',
                en: 'Light Installation'
              },
              targetDate: new Date('2024-06-30'),
              progress: 75,
            }
          ]
        }
      }
    }),
    
    prisma.project.create({
      data: {
        title: {
          hi: '‡§µ‡•É‡§ï‡•ç‡§∑‡§æ‡§∞‡•ã‡§™‡§£ ‡§Ö‡§≠‡§ø‡§Ø‡§æ‡§® 2024',
          en: 'Tree Plantation Drive 2024'
        },
        description: {
          hi: '‡§ó‡§æ‡§Ç‡§µ ‡§Æ‡•á‡§Ç 2000 ‡§™‡•á‡§°‡§º ‡§≤‡§ó‡§æ‡§®‡•á ‡§ï‡§æ ‡§Ö‡§≠‡§ø‡§Ø‡§æ‡§®',
          en: 'Campaign to plant 2000 trees in the village'
        },
        type: 'environment',
        budget: 150000,
        spent: 85000,
        status: 'IN_PROGRESS',
        startDate: new Date('2024-07-01'),
        endDate: new Date('2025-03-31'),
        tags: ['trees', 'environment', 'carbon-neutral']
      }
    })
  ]);

  console.log('‚úÖ Sample projects created');

  // Create sample schemes
  const schemes = await Promise.all([
    prisma.scheme.create({
      data: {
        title: {
          hi: '‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§Ü‡§µ‡§æ‡§∏ ‡§Ø‡•ã‡§ú‡§®‡§æ - ‡§ó‡•ç‡§∞‡§æ‡§Æ‡•Ä‡§£',
          en: 'Pradhan Mantri Awas Yojana - Rural'
        },
        description: {
          hi: '‡§ó‡•ç‡§∞‡§æ‡§Æ‡•Ä‡§£ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§™‡§ï‡•ç‡§ï‡§æ ‡§Æ‡§ï‡§æ‡§® ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ',
          en: 'Assistance scheme for building pucca houses in rural areas'
        },
        category: 'housing',
        criteriaJSON: {
          eligibility: [
            { field: 'annualIncome', operator: '<', value: 200000 },
            { field: 'hasLand', operator: '==', value: true },
            { field: 'currentHouseType', operator: '==', value: 'kutcha' }
          ],
          documents: ['aadhar', 'income_certificate', 'land_documents', 'bank_passbook']
        },
        docsRequired: ['‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§°', '‡§Ü‡§Ø ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£ ‡§™‡§§‡•ç‡§∞', '‡§≠‡•Ç‡§Æ‡§ø ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú', '‡§¨‡•à‡§Ç‡§ï ‡§™‡§æ‡§∏‡§¨‡•Å‡§ï'],
        processSteps: {
          steps: [
            {
              title: { hi: '‡§Ü‡§µ‡•á‡§¶‡§® ‡§≠‡§∞‡•á‡§Ç', en: 'Fill Application' },
              description: { hi: '‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§Ø‡§æ ‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡§∞‡•á‡§Ç', en: 'Apply online or offline' }
            },
            {
              title: { hi: '‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú ‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç', en: 'Submit Documents' },
              description: { hi: '‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç', en: 'Upload required documents' }
            },
            {
              title: { hi: '‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§®', en: 'Verification' },
              description: { hi: '‡§´‡•Ä‡§≤‡•ç‡§° ‡§µ‡•á‡§∞‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§π‡•ã‡§ó‡§æ', en: 'Field verification will be done' }
            }
          ]
        },
        active: true
      }
    }),

    prisma.scheme.create({
      data: {
        title: {
          hi: '‡§∏‡•ã‡§≤‡§∞ ‡§™‡§Ç‡§™ ‡§Ø‡•ã‡§ú‡§®‡§æ',
          en: 'Solar Pump Scheme'
        },
        description: {
          hi: '‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä ‡§™‡§∞ ‡§∏‡•ã‡§≤‡§∞ ‡§µ‡•â‡§ü‡§∞ ‡§™‡§Ç‡§™',
          en: 'Subsidized solar water pumps for farmers'
        },
        category: 'agriculture',
        criteriaJSON: {
          eligibility: [
            { field: 'occupation', operator: '==', value: 'farmer' },
            { field: 'landSize', operator: '>', value: 0.5 },
            { field: 'hasElectricityConnection', operator: '==', value: false }
          ]
        },
        docsRequired: ['‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡§æ‡§∞‡•ç‡§°', '‡§≠‡•Ç‡§Æ‡§ø ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú', '‡§¨‡•à‡§Ç‡§ï ‡§™‡§æ‡§∏‡§¨‡•Å‡§ï'],
        active: true
      }
    })
  ]);

  console.log('‚úÖ Sample schemes created');

  // Create sample forms
  const complaintForm = await prisma.form.create({
    data: {
      name: '‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£',
      slug: 'complaint-registration',
      schemaJSON: {
        type: 'object',
        properties: {
          complaintType: {
            type: 'string',
            enum: ['infrastructure', 'sanitation', 'water', 'electricity', 'other'],
            title: { hi: '‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞', en: 'Complaint Type' }
          },
          description: {
            type: 'string',
            title: { hi: '‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£', en: 'Complaint Description' },
            minLength: 10
          },
          location: {
            type: 'string',
            title: { hi: '‡§∏‡•ç‡§•‡§æ‡§®', en: 'Location' }
          },
          contactPhone: {
            type: 'string',
            pattern: '^[6-9]\\d{9}$',
            title: { hi: '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§®‡§Ç‡§¨‡§∞', en: 'Contact Number' }
          },
          priority: {
            type: 'string',
            enum: ['low', 'medium', 'high', 'urgent'],
            default: 'medium',
            title: { hi: '‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ', en: 'Priority' }
          }
        },
        required: ['complaintType', 'description', 'location', 'contactPhone']
      },
      slaDays: 7,
      workflowJSON: {
        assignmentRules: [
          {
            condition: { complaintType: 'infrastructure' },
            assignTo: 'infrateam@ummidsehari.in'
          },
          {
            condition: { complaintType: 'water' },
            assignTo: 'waterteam@ummidsehari.in'
          }
        ]
      },
      active: true
    }
  });

  console.log('‚úÖ Complaint form created');

  // Create sample submissions
  const submissions = await Promise.all([
    prisma.submission.create({
      data: {
        formId: complaintForm.id,
        userId: null, // Anonymous submission
        dataJSON: {
          complaintType: 'water',
          description: '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡§°‡§º‡§ï ‡§™‡§∞ ‡§™‡§æ‡§®‡•Ä ‡§ï‡§æ ‡§™‡§æ‡§á‡§™ ‡§ü‡•Ç‡§ü‡§æ ‡§π‡•à ‡§î‡§∞ ‡§¶‡§ø‡§® ‡§≠‡§∞ ‡§™‡§æ‡§®‡•Ä ‡§¨‡§π ‡§∞‡§π‡§æ ‡§π‡•à',
          location: '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡§°‡§º‡§ï, ‡§¶‡•Å‡§ï‡§æ‡§® ‡§ï‡•á ‡§™‡§æ‡§∏',
          contactPhone: '9876543210',
          priority: 'high'
        },
        status: 'IN_PROGRESS',
        geo: { lat: 28.6139, lng: 77.2090 },
        slaDue: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
        history: [
          {
            status: 'PENDING',
            timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
            note: '‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡•Ä ‡§ó‡§à'
          },
          {
            status: 'IN_PROGRESS',
            timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),
            note: '‡§ü‡•Ä‡§Æ ‡§ï‡•ã ‡§Ö‡§∏‡§æ‡§á‡§® ‡§ï‡•Ä ‡§ó‡§à'
          }
        ]
      }
    })
  ]);

  console.log('‚úÖ Sample submissions created');

  // Create sample events
  const events = await Promise.all([
    prisma.event.create({
      data: {
        title: {
          hi: '‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§∏‡§≠‡§æ ‡§¨‡•à‡§†‡§ï',
          en: 'Gram Sabha Meeting'
        },
        description: {
          hi: '‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§∏‡§≠‡§æ ‡§ï‡•Ä ‡§¨‡•à‡§†‡§ï, ‡§∏‡§≠‡•Ä ‡§ó‡•ç‡§∞‡§æ‡§Æ‡§µ‡§æ‡§∏‡•Ä ‡§Ü‡§Æ‡§Ç‡§§‡•ç‡§∞‡§ø‡§§ ‡§π‡•à‡§Ç',
          en: 'Monthly Gram Sabha meeting, all villagers are invited'
        },
        startDate: new Date('2024-12-15T10:00:00Z'),
        endDate: new Date('2024-12-15T14:00:00Z'),
        location: '‡§™‡§Ç‡§ö‡§æ‡§Ø‡§§ ‡§≠‡§µ‡§®',
        geo: {
          lat: 28.6139,
          lng: 77.2090
        },
        rsvpEnabled: true,
        maxAttendees: 200,
        tags: ['gram-sabha', 'meeting', 'governance']
      }
    }),

    prisma.event.create({
      data: {
        title: {
          hi: '‡§µ‡•É‡§ï‡•ç‡§∑‡§æ‡§∞‡•ã‡§™‡§£ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ',
          en: 'Tree Plantation Program'
        },
        description: {
          hi: '‡§∏‡§æ‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§µ‡•É‡§ï‡•ç‡§∑‡§æ‡§∞‡•ã‡§™‡§£ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ - ‡§∏‡§≠‡•Ä ‡§â‡§Æ‡•ç‡§∞ ‡§ï‡•á ‡§≤‡•ã‡§ó ‡§≠‡§æ‡§ó ‡§≤‡•á ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç',
          en: 'Community tree plantation program - people of all ages can participate'
        },
        startDate: new Date('2024-12-20T08:00:00Z'),
        endDate: new Date('2024-12-20T12:00:00Z'),
        location: '‡§∏‡•ç‡§ï‡•Ç‡§≤ ‡§ï‡•á ‡§™‡•Ä‡§õ‡•á ‡§ï‡§æ ‡§Æ‡•à‡§¶‡§æ‡§®',
        rsvpEnabled: true,
        maxAttendees: 100,
        tags: ['environment', 'trees', 'community']
      }
    })
  ]);

  console.log('‚úÖ Sample events created');

  // Create sample pledges
  const pledges = await Promise.all([
    prisma.pledge.create({
      data: {
        userId: null,
        pledgeType: 'TREE',
        title: '50 ‡§™‡•á‡§°‡§º ‡§≤‡§ó‡§æ‡§®‡•á ‡§ï‡§æ ‡§∏‡§Ç‡§ï‡§≤‡•ç‡§™',
        amount: 50,
        description: '‡§Ö‡§™‡§®‡•á ‡§ò‡§∞ ‡§ï‡•á ‡§Ü‡§∏-‡§™‡§æ‡§∏ ‡§î‡§∞ ‡§ñ‡§æ‡§≤‡•Ä ‡§ú‡§Æ‡•Ä‡§® ‡§™‡§∞ ‡§´‡§≤‡§¶‡§æ‡§∞ ‡§™‡•á‡§°‡§º ‡§≤‡§ó‡§æ‡§ä‡§Ç‡§ó‡§æ',
        approved: true
      }
    }),
    prisma.pledge.create({
      data: {
        userId: editorUser.id,
        pledgeType: 'SOLAR',
        title: '‡§ò‡§∞ ‡§™‡§∞ ‡§∏‡•ã‡§≤‡§∞ ‡§™‡•à‡§®‡§≤ ‡§≤‡§ó‡§æ‡§®‡§æ',
        amount: 3, // 3kW
        description: '3kW ‡§ï‡§æ ‡§∏‡•ã‡§≤‡§∞ ‡§™‡•à‡§®‡§≤ ‡§≤‡§ó‡§æ‡§ï‡§∞ ‡§¨‡§ø‡§ú‡§≤‡•Ä ‡§ï‡§æ ‡§¨‡§ø‡§≤ ‡§ï‡§Æ ‡§ï‡§∞‡§®‡§æ',
        approved: true
      }
    })
  ]);

  console.log('‚úÖ Sample pledges created');

  // Create directory entries
  const directoryEntries = await Promise.all([
    prisma.directoryEntry.create({
      data: {
        type: 'SHG',
        name: '‡§Æ‡§æ‡§Å ‡§¶‡•Å‡§∞‡•ç‡§ó‡§æ ‡§Æ‡§π‡§ø‡§≤‡§æ ‡§∏‡•ç‡§µ‡§Ø‡§Ç ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§∏‡§Æ‡•Ç‡§π',
        contact: {
          phone: '+91-9876543211',
          email: 'durga.shg@example.com',
          address: '‡§µ‡§æ‡§∞‡•ç‡§°-2, ‡§¶‡§æ‡§Æ‡§¶‡§Ø'
        },
        description: {
          hi: '‡§Æ‡§π‡§ø‡§≤‡§æ ‡§∏‡§∂‡§ï‡•ç‡§§‡§ø‡§ï‡§∞‡§£ ‡§î‡§∞ ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§µ‡§≤‡§Ç‡§¨‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§∏‡§Æ‡•Ç‡§π',
          en: 'Group working for women empowerment and economic self-reliance'
        },
        products: [
          {
            name: { hi: '‡§π‡§∏‡•ç‡§§‡§®‡§ø‡§∞‡•ç‡§Æ‡§ø‡§§ ‡§∏‡§æ‡§¨‡•Å‡§®', en: 'Handmade Soap' },
            price: 25,
            unit: 'piece'
          },
          {
            name: { hi: '‡§Ü‡§ö‡§æ‡§∞-‡§Æ‡•Å‡§∞‡§¨‡•ç‡§¨‡§æ', en: 'Pickles & Preserves' },
            price: 150,
            unit: 'kg'
          }
        ],
        tags: ['women', 'self-help', 'handicrafts'],
        approved: true,
        featured: true
      }
    }),

    prisma.directoryEntry.create({
      data: {
        type: 'BUSINESS',
        name: '‡§∞‡§æ‡§Æ‡§ú‡•Ä ‡§ï‡§ø‡§∞‡§æ‡§®‡§æ ‡§∏‡•ç‡§ü‡•ã‡§∞',
        contact: {
          phone: '+91-9876543212',
          address: '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§¨‡§æ‡§ú‡§æ‡§∞, ‡§¶‡§æ‡§Æ‡§¶‡§Ø'
        },
        description: {
          hi: '‡§¶‡•à‡§®‡§ø‡§ï ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•Ä ‡§∏‡§≠‡•Ä ‡§µ‡§∏‡•ç‡§§‡•Å‡§è‡§Ç ‡§â‡§™‡§≤‡§¨‡•ç‡§ß',
          en: 'All daily use items available'
        },
        products: [
          {
            name: { hi: '‡§ï‡§ø‡§∞‡§æ‡§®‡§æ ‡§∏‡§æ‡§Æ‡§æ‡§®', en: 'Grocery Items' },
            description: { hi: '‡§¶‡§æ‡§≤, ‡§ö‡§æ‡§µ‡§≤, ‡§§‡•á‡§≤, ‡§Æ‡§∏‡§æ‡§≤‡•á', en: 'Pulses, rice, oil, spices' }
          }
        ],
        tags: ['grocery', 'daily-needs'],
        approved: true
      }
    })
  ]);

  console.log('‚úÖ Directory entries created');

  // Create translation keys for UI
  const translationKeys = await Promise.all([
    prisma.translationKey.create({
      data: {
        key: 'common.welcome',
        defaultText: 'Welcome',
        module: 'common',
        translations: {
          create: [
            { locale: 'hi-IN', text: '‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à' },
            { locale: 'en-IN', text: 'Welcome' }
          ]
        }
      }
    }),
    prisma.translationKey.create({
      data: {
        key: 'nav.services',
        defaultText: 'Services',
        module: 'navigation',
        translations: {
          create: [
            { locale: 'hi-IN', text: '‡§∏‡•á‡§µ‡§æ‡§è‡§Ç' },
            { locale: 'en-IN', text: 'Services' }
          ]
        }
      }
    }),
    prisma.translationKey.create({
      data: {
        key: 'nav.projects',
        defaultText: 'Projects',
        module: 'navigation',
        translations: {
          create: [
            { locale: 'hi-IN', text: '‡§™‡§∞‡§ø‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç' },
            { locale: 'en-IN', text: 'Projects' }
          ]
        }
      }
    })
  ]);

  console.log('‚úÖ Translation keys created');

  // Create feature flags
  const featureFlags = await Promise.all([
    prisma.featureFlag.create({
      data: {
        key: 'enable_pwa_install_prompt',
        enabled: true,
        description: 'Show PWA installation prompt to users'
      }
    }),
    prisma.featureFlag.create({
      data: {
        key: 'enable_background_sync',
        enabled: true,
        description: 'Enable background synchronization for offline forms'
      }
    }),
    prisma.featureFlag.create({
      data: {
        key: 'enable_advanced_analytics',
        enabled: false,
        description: 'Enable advanced analytics and tracking'
      }
    })
  ]);

  console.log('‚úÖ Feature flags created');

  // Create audit log for seeding
  await prisma.auditLog.create({
    data: {
      actorId: adminUser.id,
      action: 'seed',
      entity: 'Database',
      diffJSON: {
        event: 'database_seeded',
        timestamp: new Date().toISOString(),
        records_created: {
          users: 3,
          projects: 2,
          schemes: 2,
          forms: 1,
          submissions: 1,
          events: 2,
          pledges: 2,
          directory_entries: 2,
          translation_keys: 3,
          feature_flags: 3
        }
      }
    }
  });

  console.log('‚úÖ Audit log entry created');

  console.log(`
üéâ Database seeding completed successfully!

üë§ Admin User Created:
   Email: admin@ummidsehari.in
   2FA Secret: ${adminSecret.base32}
   2FA QR Code URL: ${speakeasy.otpauthURL({ secret: adminSecret.base32, label: 'admin@ummidsehari.in', name: 'Ummid Se Hari', issuer: 'Damday GP' })}

üìä Sample Data Created:
   - 3 Users (admin, editor, data-entry)  
   - 2 Projects with milestones
   - 2 Government schemes with eligibility criteria
   - 1 Complaint form with sample submission
   - 2 Upcoming events with RSVP
   - 2 Pledges for tree planting and solar
   - 2 Directory entries (SHG and business)
   - Translation keys for Hindi/English UI
   - Feature flags for PWA and advanced features

üöÄ Ready for advanced development!
  `);
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error('‚ùå Seeding failed:', e);
    await prisma.$disconnect();
    process.exit(1);
  });