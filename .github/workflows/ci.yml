name: WE3 Research CI/CD

on:
  push:
    branches: [ main, develop, "copilot/*" ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  rust-tests:
    name: Rust Tests and Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Lint with Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Run tests
      run: cargo test --verbose --all-features
      
    - name: Run benchmarks (compilation only)
      run: cargo bench --no-run

  python-tests:
    name: Python Tests and Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        
    - name: Install dependencies
      run: poetry install --no-interaction
      
    - name: Lint with flake8
      run: poetry run flake8 python/we3
      
    - name: Check formatting with black
      run: poetry run black --check python/we3
      
    - name: Check import order with isort
      run: poetry run isort --check-only python/we3
      
    - name: Type check with mypy
      run: poetry run mypy python/we3
      
    - name: Run tests
      run: poetry run pytest python/tests/ -v --cov=we3 --cov-report=xml
      
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python

  notebooks:
    name: Test Jupyter Notebooks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      
    - name: Install dependencies
      run: poetry install --no-interaction
      
    - name: Execute notebooks
      run: |
        find python/notebooks -name "*.ipynb" -exec poetry run jupyter nbconvert --to notebook --execute {} \;

  formal-proofs:
    name: Formal Proof Verification
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.head_commit.message, 'PROVEN') }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Lean 4
      uses: leanprover/lean-action@v1
      with:
        lean-version: 4.0.0
        
    - name: Verify Lean proofs
      run: |
        if [ -d "proofs/lean" ]; then
          cd proofs/lean
          lean --version
          lake build
        else
          echo "No Lean proofs found"
        fi

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [rust-tests, python-tests]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      
    - name: Install dependencies
      run: |
        cargo build --release
        poetry install --no-interaction
        
    - name: Run integration tests
      run: |
        poetry run python -c "
        import sys
        print('Integration test placeholder')
        # TODO: Add cross-framework validation tests
        "

  memory-update-check:
    name: Check memory.md Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check memory.md was updated
      run: |
        git fetch origin main
        if git diff --name-only origin/main...HEAD | grep -q "memory.md"; then
          echo "✅ memory.md was updated"
        else
          echo "❌ memory.md must be updated for all changes"
          exit 1
        fi
        
    - name: Validate memory.md format
      run: |
        if grep -q "CURRENT_STATUS:" memory.md; then
          echo "✅ memory.md contains status"
        else
          echo "❌ memory.md missing CURRENT_STATUS"
          exit 1
        fi

  reproducibility:
    name: Reproducibility Check
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'VERIFIED')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup environment
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      
    - name: Run reproducibility tests
      run: |
        poetry install --no-interaction
        # TODO: Run experiments with fixed seeds and verify identical results
        echo "Reproducibility testing placeholder"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Audit Rust dependencies
      run: |
        cargo install cargo-audit
        cargo audit
        
    - name: Audit Python dependencies
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: pyproject.toml